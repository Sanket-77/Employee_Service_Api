package com.vit.Myfirstspringbootapi;import com.vit.Myfirstspringbootapi.model.Employee;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import java.util.List;@RestControllerpublic class EmployeeController {    @PostMapping("init_db")    public void initDB(){        Employee employee = Employee.builder().WithName("sanket").build();        Employee employee1 = Employee.builder().WithName("prashant]").build();        Employee employee2 = Employee.builder().WithName("shubham").build();        createNewEmployee(employee);        createNewEmployee(employee1);        createNewEmployee(employee2);    }    @Autowired    EmployeeService employeeService;    @Autowired    EmployeePetService employeePetService;    @GetMapping("/employee")    public List<Employee> getEmployee(){        return employeeService.getAllEmployee();    }    @GetMapping("/employee/{name}")    public List<Employee>getEmployeeByName(@PathVariable String name) throws Exception {        List<Employee>employee = employeeService.getEmployeeByName(name);        if (employee.isEmpty()){            throw new  Exception("Employee with name  "+ name + " Not Found ");        }else {            return employee;        }    }    // Create =>    @PostMapping("/employee")    public void createNewEmployee(@RequestBody Employee employee){        employeeService.createNewEmployee(employee);    }    // Edit =>    @PutMapping("/employee")    public ResponseEntity<String> editEmployee(@RequestBody Employee employee) throws Exception {        try{            employeeService.editEmployee(employee);            return ResponseEntity.status(HttpStatus.ACCEPTED).body("Employee Edited: "+ employee);        }catch(Exception e){            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getMessage());        }    }    // Delete =>    @DeleteMapping("/employee/{id}")    public ResponseEntity<String>  deleteEmployee(@PathVariable Integer id){        try{            employeeService.deleteEmployeeById(id);            return ResponseEntity.status(HttpStatus.ACCEPTED).body("Employee Deleted with ID as: "+ id);        }catch (Exception e){            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getMessage());        }    }    @GetMapping("pet/{status}")    public String getMyPets(@PathVariable String status){        return employeePetService.getAllPetInfoWithStatusAs(status);    }}//    Employee employee0 = Employee.builder().WithId(1).WithName("Sanket").WithAge(25).WithEmail("sanketcjhavan4686@gmail.com").build();//    Employee employee1 = Employee.builder().WithAge(27).WithId(2).WithName("Prashant").WithEmail("prashantpowar7972@gmail.com").build();//    Employee employee2 = Employee.builder().WithName("Shubham").WithId(3).WithAge(26).WithEmail("shubhammankame8790@gmail.com").build();//    List<Employee> employeelist = new ArrayList<>();//    private void WithId(int i) {//    }//http://localhost:8082/All_employees//    @GetMapping("/All_employees")//    public List<Employee> getAllEmployee(){//        employeelist.add(employee1);//        employeelist.add(employee2);//        return employeelist;//    }////    // http://localhost:8082/employee/sanket//    @GetMapping("/employee/{name}")//    public Object getEmployee(@PathVariable String name){//        if (name.contains("sanket")){//            return employee0;//        }else if (name.contains("prashant")){//            return employee1;//        } else if (name.contains("shubham")) {//            return employee2;//        }else {//            return "Error: no such employee exists. " + name;//        }//    }